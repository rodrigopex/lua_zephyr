/* clang-format off */

#include <lua.h>
#include <lauxlib.h>
#include <lualib.h>
#include <lua_zephyr/utils.h>
#include <zephyr/kernel.h>

static char heap_mem[CONFIG_LUA_THREAD_HEAP_SIZE];
static struct sys_heap lua_heap;
static const char @FILE_NAME@_lua_script[] = "@LUA_CONTENT@";

int __weak @FILE_NAME@_lua_setup(lua_State *L)
{
    ARG_UNUSED(L);

	return 0;
}

static void print_sys_memory_stats(struct sys_heap *hp)
{
	struct sys_memory_stats stats;

	sys_heap_runtime_stats_get(hp, &stats);

	printk("allocated %zu, free %zu, max allocated %zu, heap size %u\n", stats.allocated_bytes,
	       stats.free_bytes, stats.max_allocated_bytes, CONFIG_LUA_THREAD_HEAP_SIZE);
}

static void @FILE_NAME@_lua_thread(void*p1, void*p2, void*p3)
{
    ARG_UNUSED(p1);
    ARG_UNUSED(p2);
    ARG_UNUSED(p3);

	sys_heap_init(&lua_heap, heap_mem, CONFIG_LUA_THREAD_HEAP_SIZE);

	lua_State *L = lua_newstate(lua_zephyr_allocator, &lua_heap);

    int err = @FILE_NAME@_lua_setup(L);
    if(err) {
        lua_close(L);
        __ASSERT(false, "Setup required to be successful");
        return;
    }

	if (luaL_dostring(L, @FILE_NAME@_lua_script) != LUA_OK) {
		printk("Lua error: %s\n", lua_tostring(L, -1));
		lua_pop(L, 1);
	}

	lua_close(L);

	print_sys_memory_stats(&lua_heap);

    k_sleep(K_FOREVER);
}

K_THREAD_DEFINE(@FILE_NAME@_lua_thread_id, CONFIG_LUA_THREAD_STACK_SIZE, @FILE_NAME@_lua_thread, NULL, NULL, NULL, CONFIG_LUA_THREAD_PRIORITY, 0, 0);

/* clang-format on */
